{"version":3,"sources":["enums/TodoStatus.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","helpers/getSortedType.ts","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers/getFilteredTodos.ts","index.tsx"],"names":["TodoStatus","TodoItem","todo","selectedTodoId","openModal","id","title","completed","isOpened","className","classNames","type","onClick","TodoList","props","todos","onTodoClick","map","TodoFilter","query","status","onQueryChange","onStatusChange","value","onChange","event","Active","Completed","All","getTodoStatus","target","placeholder","style","pointerEvents","Loader","max","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoModal","onClose","useState","user","setUser","userId","useEffect","getUser","error","href","email","name","App","setTodos","setQuery","setStatus","currentTodoId","setCurrentTodoId","isListLoading","setIsListLoading","loadTodos","useCallback","a","receivedTodos","currentTodo","useMemo","find","visibleTodos","normalizedQuery","toLowerCase","split","filter","Boolean","join","isQueryInTitle","includes","isCorrectStatus","getFilteredTodos","closeModal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fc72af1.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodoId: number;\n  openModal: () => void;\n};\n\nexport const TodoItem: FC<Props> = ({ todo, selectedTodoId, openModal }) => {\n  const { id, title, completed } = todo;\n  const isOpened = selectedTodoId === id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isOpened,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n\n      <td className=\"is-vcentered\">\n        {completed ? (\n          <span data-cy=\"iconCompleted\">{'\\u2705'}</span>\n        ) : (\n          <span>{'\\u{274C}'}</span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button is-small is-info is-light\"\n          type=\"button\"\n          onClick={openModal}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': !isOpened,\n                'fa-eye-slash': isOpened,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  onTodoClick: (todoId: number) => void;\n};\n\nexport const TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    selectedTodoId,\n    onTodoClick,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id } = todo;\n\n          return (\n            <TodoItem\n              key={id}\n              todo={todo}\n              selectedTodoId={selectedTodoId}\n              openModal={() => onTodoClick(id)}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\n\nimport { TodoStatus } from '../../enums/TodoStatus';\n\nimport { getTodoStatus } from '../../helpers/getSortedType';\n\ntype Props = {\n  query: string;\n  onQueryChange: (query: string) => void;\n  status: TodoStatus;\n  onStatusChange: (status: TodoStatus) => void;\n};\n\nexport const TodoFilter: FC<Props> = ({\n  query,\n  status,\n  onQueryChange,\n  onStatusChange,\n}) => {\n  return (\n    <div className=\"container\">\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select is-info\">\n            <select\n              data-cy=\"statusSelect\"\n              value={status}\n              onChange={\n                (event) => onStatusChange(getTodoStatus(event.target.value))\n              }\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input is-info\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={(event) => onQueryChange(event.target.value)}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {query !== '' && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete is-info\"\n                onClick={() => onQueryChange('')}\n                aria-label=\"clearSearchButton\"\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    </div>\n  );\n};\n","import { TodoStatus } from '../enums/TodoStatus';\n\nexport const getTodoStatus = (type: string) => {\n  switch (type) {\n    case TodoStatus.Active:\n      return TodoStatus.Active;\n\n    case TodoStatus.Completed:\n      return TodoStatus.Completed;\n\n    case TodoStatus.All:\n    default:\n      return TodoStatus.All;\n  }\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <progress\n    className=\"progress is-large is-info\"\n    data-cy=\"loader\"\n    max=\"100\"\n  >\n    40%\n  </progress>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(1100)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    title,\n    completed,\n    id,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    try {\n      getUser(userId).then(setUser);\n    } catch (error) {\n      setUser(null);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card modal-card-body-background-info\">\n          <header className=\"modal-card-head has-background-info\">\n            <div\n              className=\"modal-card-title has-text-weight-medium has-text-white\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { TodoStatus } from './enums/TodoStatus';\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState(TodoStatus.All);\n  const [currentTodoId, setCurrentTodoId] = useState(0);\n  const [isListLoading, setIsListLoading] = useState(false);\n\n  const loadTodos = useCallback(\n    async () => {\n      setIsListLoading(true);\n\n      try {\n        const receivedTodos = await getTodos().then();\n\n        setTodos(receivedTodos);\n      } catch (error) {\n        setTodos([]);\n      }\n\n      setIsListLoading(false);\n    },\n    [getTodos],\n  );\n\n  const currentTodo = useMemo(\n    () => todos.find(({ id }) => id === currentTodoId),\n    [currentTodoId],\n  );\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(\n    () => getFilteredTodos(todos, status, query),\n    [todos, status, query],\n  );\n\n  const closeModal = useCallback(\n    () => setCurrentTodoId(0),\n    [setCurrentTodoId],\n  );\n\n  return (\n    <>\n      <div className=\"columns is-flex is-justify-content-center\">\n        <div className=\"column is-two-thirds p-6\">\n          <div className=\"panel is-info\">\n            <h1 className=\"panel-heading\">Todos:</h1>\n\n            <div className=\"panel-block\">\n              <TodoFilter\n                query={query}\n                status={status}\n                onQueryChange={setQuery}\n                onStatusChange={setStatus}\n              />\n            </div>\n\n            <div className=\"panel-block\">\n              {isListLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={currentTodoId}\n                  onTodoClick={setCurrentTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} onClose={closeModal} />\n      )}\n    </>\n  );\n};\n","import { TodoStatus } from '../enums/TodoStatus';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  status: TodoStatus,\n  query: string,\n) => {\n  if (status !== TodoStatus.All || query) {\n    const normalizedQuery = query\n      .toLowerCase()\n      .split(' ')\n      .filter(Boolean)\n      .join(' ');\n\n    return todos.filter(({ title, completed }) => {\n      const isQueryInTitle = title\n        .toLowerCase()\n        .includes(normalizedQuery);\n\n      let isCorrectStatus = true;\n\n      switch (status) {\n        case TodoStatus.Active:\n          isCorrectStatus = completed === false;\n          break;\n\n        case TodoStatus.Completed:\n          isCorrectStatus = completed === true;\n          break;\n\n        default:\n          isCorrectStatus = true;\n          break;\n      }\n\n      return isQueryInTitle && isCorrectStatus;\n    });\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}